
package arbol.minimo;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

public class Principal extends javax.swing.JFrame {
    private List<Linea> lineas = new ArrayList<>();
    private List<Nodo> arbol = new ArrayList<>();
    
    private static int cont = 1;
    private static boolean selected= false;
    private static Nodo nodoSel;
  
    public Principal() {
        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        this.setSize(screenSize);
        this.getContentPane().setBackground(Color.WHITE);
        lblDistancia.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnDesLinea = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnResolver = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lblDistancia = new javax.swing.JLabel();
        btnEraseAll = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ARBOL EXTENSO MINIMO");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        jLabel1.setText("Añadir nodo");

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arbol/minimo/Añadir.png"))); // NOI18N
        btnAdd.setToolTipText("Insertar nuevo nodo");
        btnAdd.setContentAreaFilled(false);
        btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arbol/minimo/Eliminar.png"))); // NOI18N
        btnEliminar.setToolTipText("Eliminar nodo seleccionado");
        btnEliminar.setContentAreaFilled(false);
        btnEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jLabel2.setText("Eliminar nodo");

        btnDesLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arbol/minimo/Deshacer.png"))); // NOI18N
        btnDesLinea.setToolTipText("Deshacer ultima linea creada");
        btnDesLinea.setBorderPainted(false);
        btnDesLinea.setContentAreaFilled(false);
        btnDesLinea.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDesLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesLineaActionPerformed(evt);
            }
        });

        jLabel3.setText("Deshacer linea");

        btnResolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arbol/minimo/resolver.png"))); // NOI18N
        btnResolver.setToolTipText("Resolver arbol");
        btnResolver.setContentAreaFilled(false);
        btnResolver.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnResolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResolverActionPerformed(evt);
            }
        });

        jLabel4.setText("Resolver");

        lblDistancia.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lblDistancia.setText("Distancia total: 5000");

        btnEraseAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arbol/minimo/eraseAll.png"))); // NOI18N
        btnEraseAll.setToolTipText("Eliminar todos los nodos y lineas creadas");
        btnEraseAll.setBorderPainted(false);
        btnEraseAll.setContentAreaFilled(false);
        btnEraseAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEraseAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEraseAllActionPerformed(evt);
            }
        });

        jLabel5.setText("Borrar todo");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 304, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnDesLinea, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnResolver, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4)
                                .addComponent(btnEraseAll, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDistancia, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDesLinea, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(3, 3, 3)
                .addComponent(btnResolver, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEraseAll, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(lblDistancia)
                .addGap(27, 27, 27))
        );

        jLabel3.getAccessibleContext().setAccessibleName("\"Deshacer ultima\\nlinea\"");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        quitarRuta();
        Nodo nodo = new Nodo(cont);
        arbol.add(nodo);
        this.add(nodo.getLabel());
        
   
        nodo.getLabel().addMouseMotionListener(new java.awt.event.MouseMotionAdapter(){
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel1ActionPerformed(evt);
            }
        });
        
        nodo.getLabel().addMouseListener(new java.awt.event.MouseAdapter(){
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt){
                labelClicked(nodo);
            }
        });
     
     dibujar();  
        cont++;
              
    }//GEN-LAST:event_btnAddActionPerformed

    private void quitarRuta(){
        for(int i=0;i<lineas.size();i++){
            lineas.get(i).enRuta(false);
         }
        lblDistancia.setVisible(false);
    }
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
       quitarRuta();
        if(selected){
            this.remove(nodoSel.getLabel());
            arbol.remove(nodoSel);
            //this.validate();
            //  this.repaint();
            int tam = lineas.size();
            
            for(tam-=1;tam>=0;tam--){
                Linea linea = lineas.get(tam);
                if(linea.conectadoA(nodoSel)){
                    lineas.remove(linea);
                }
         }
          selected=false;
          nodoSel=null;
        }
        dibujar();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnDesLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesLineaActionPerformed
        quitarRuta();
        if(!lineas.isEmpty()){
            int remover= lineas.size()-1;
            for(int i=0;i<arbol.size();i++){
                if(lineas.get(remover).conectadoA(arbol.get(i))){
                    arbol.get(i).remLinea(lineas.get(remover));
                }
            }
            lineas.remove(remover);
            dibujar();
        }
    }//GEN-LAST:event_btnDesLineaActionPerformed

    private void btnResolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResolverActionPerformed
        quitarRuta();
        if(arbol.size()>1){
            if(!lineas.isEmpty()){
               List<Nodo> minimo = new ArrayList<>();
               minimo.add(arbol.get(0));
               setRuta(minimo);
               limpiarLineas();
               lblDistancia.setText("Distancia total: "+calcDistancia());
               lblDistancia.setVisible(true);
               dibujar();
            }else JOptionPane.showMessageDialog(null, "Asegurese de conectar al menos 2 nodos","ERROR", 1);
        }else{
            JOptionPane.showMessageDialog(null, "Agrege más nodos", "ERROR", 1);
        }
    }//GEN-LAST:event_btnResolverActionPerformed

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        dibujar();
    }//GEN-LAST:event_formWindowStateChanged

    private void btnEraseAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEraseAllActionPerformed
        selected = false;
        nodoSel = null;
        for(int i=0;i<arbol.size();i++){
            this.remove(arbol.get(i).getLabel());
        }
        arbol.clear();
        lineas.clear();
        lblDistancia.setVisible(false);
        cont=1;
        dibujar();
    }//GEN-LAST:event_btnEraseAllActionPerformed
    private int calcDistancia(){
        int dist=0;
        for(int i=0;i<lineas.size();i++){
            dist+=lineas.get(i).getDistancia();
        }
        
        return dist;
    }
    private void limpiarLineas(){
        for(int i=lineas.size()-1;i>=0;i--){
            if(!lineas.get(i).esRuta()){
                lineas.remove(i);
            }
        }
    }
    private void setRuta(List minimo){
        if(minimo.size()==arbol.size()){
            return;
        }
        Linea con= menor(minimo);
        if(con!=null){
            if(minimo.contains(con.getInicio())) minimo.add(con.getFin());
            else minimo.add(con.getInicio());
            con.enRuta(true);
            setRuta(minimo);
        }
    }
    
    private Linea menor(List<Nodo> minimo){
        Linea menor = null;
        for(int i=0;i<minimo.size();i++){
            Nodo nod = minimo.get(i);
            for(int j=0;j<nod.getLineas().size();j++){
                Linea lin = (Linea) nod.getLineas().get(j);
                int conEnArbol =0;

                for(int k=0;k<minimo.size();k++){
                    if(lin.conectadoA(minimo.get(k))) conEnArbol++;
                }
                if(menor!=null){
                    if(lin.getDistancia()<menor.getDistancia() && conEnArbol<2){
                        menor=lin;
                    }
                }else if(conEnArbol<2){
                    menor=lin;
                }
            }
        }
        
        return menor;
    }
    
    private void dibujar(){
        this.update(this.getGraphics());
         for(int i=0;i<lineas.size();i++){
            lineas.get(i).dibujar(this.getGraphics());
         }
    }
    private void jLabel1ActionPerformed(java.awt.event.MouseEvent evt){
        JLabel label = (JLabel) evt.getSource();
        int y = evt.getYOnScreen()-80;
        int x = evt.getXOnScreen()-label.getWidth()/2;
        if(x>this.getWidth()-150){
            x=this.getWidth()-150;
        }
        if(y<this.getHeight()-80){
            if(y>0)
            label.setLocation(x,y);
            else label.setLocation(x,0);
        }else label.setLocation(x,this.getHeight()+80);
      dibujar();
    }
    
    private void labelClicked(Nodo nodo){
        if(!selected){
           nodoSel=nodo;
           nodoSel.setSelected(true);
           selected=true;
       }else if(nodoSel.equals(nodo)){
           nodoSel.setSelected(false);
           selected=false;
           nodoSel=null;
       }else{
           int dist=Integer.MIN_VALUE;
           
           try{
                String di = JOptionPane.showInputDialog(null, "¿cuál es la distancia?", "", 3);
                if(di!=null){
                    dist=Integer.parseInt(di);
                }
                 
            }catch(Exception e){
                JOptionPane.showMessageDialog(null,"El número ingresado no es válido","ERROR",1);
            }
           
            if(dist!=Integer.MIN_VALUE){
                if(lineas.isEmpty()){
                    Linea nlinea = new Linea(dist,nodoSel,nodo, this.getGraphics());
                    lineas.add(nlinea);
                }else{
                    for(int i=0;i<lineas.size();i++){
                        Linea linea = lineas.get(i);
                         if((linea.getInicio().equals(nodoSel) && linea.getFin().equals(nodo)) || (linea.getInicio().equals(nodo) && linea.getFin().equals(nodoSel))){
                             linea.setDistancia(dist);
                         }else if(i==lineas.size()-1){
                            Linea nlinea = new Linea(dist,nodoSel,nodo, this.getGraphics());
                            lineas.add(nlinea);
                            
                         }
                    }
                }
            }
           
            selected=false;
            nodoSel.setSelected(false);
            nodoSel=null;
            
       }
        quitarRuta();
        dibujar();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDesLinea;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnEraseAll;
    private javax.swing.JButton btnResolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lblDistancia;
    // End of variables declaration//GEN-END:variables
}
